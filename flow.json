[
    {
        "id": "807162d3d645abc3",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bbd7f22c7ecf15cb",
        "type": "ui_tab",
        "name": "DEM collision detector",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7206086c3d6e4859",
        "type": "ui_group",
        "name": "Default",
        "tab": "bbd7f22c7ecf15cb",
        "order": 1,
        "disp": false,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "42dfc2878b63ea43",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "4a99b11e1d72c053",
        "type": "ui_spacer",
        "z": "807162d3d645abc3",
        "name": "spacer",
        "group": "7206086c3d6e4859",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "8c042a4270360208",
        "type": "ui_spacer",
        "z": "807162d3d645abc3",
        "name": "spacer",
        "group": "7206086c3d6e4859",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "e7d50571b3f3dbe6",
        "type": "ui_spacer",
        "z": "807162d3d645abc3",
        "name": "spacer",
        "group": "7206086c3d6e4859",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "b082b0bbcb190b5f",
        "type": "ui_spacer",
        "z": "807162d3d645abc3",
        "name": "spacer",
        "group": "7206086c3d6e4859",
        "order": 10,
        "width": 6,
        "height": 1
    },
    {
        "id": "193658cf5fce8890",
        "type": "ui_worldmap",
        "z": "807162d3d645abc3",
        "group": "7206086c3d6e4859",
        "order": 1,
        "width": 18,
        "height": 9,
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "10",
        "layer": "OSMC",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "true",
        "allowFileDrop": "true",
        "path": "/worldmap",
        "overlist": "",
        "maplist": "OSMC",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 160,
        "y": 60,
        "wires": []
    },
    {
        "id": "c58a1ef972059de0",
        "type": "worldmap",
        "z": "807162d3d645abc3",
        "name": "",
        "lat": "",
        "lon": "",
        "zoom": "",
        "layer": "OSMG",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "none",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN,HM",
        "maplist": "OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 940,
        "y": 380,
        "wires": []
    },
    {
        "id": "abe4a6a1406a0286",
        "type": "ui_slider",
        "z": "807162d3d645abc3",
        "name": "altitude",
        "label": "altitude",
        "tooltip": "",
        "group": "7206086c3d6e4859",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "altitude",
        "topicType": "str",
        "min": 0,
        "max": "4000",
        "step": "10",
        "className": "",
        "x": 420,
        "y": 260,
        "wires": [
            [
                "eacf802104864a50"
            ]
        ]
    },
    {
        "id": "186d7d83d731da37",
        "type": "ui_slider",
        "z": "807162d3d645abc3",
        "name": "distance",
        "label": "distance",
        "tooltip": "",
        "group": "7206086c3d6e4859",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "distance",
        "topicType": "str",
        "min": "50",
        "max": "250000",
        "step": "10",
        "className": "",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "eacf802104864a50"
            ]
        ]
    },
    {
        "id": "144710243c9c2497",
        "type": "ui_slider",
        "z": "807162d3d645abc3",
        "name": "heading",
        "label": "heading",
        "tooltip": "",
        "group": "7206086c3d6e4859",
        "order": 2,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "heading",
        "topicType": "str",
        "min": 0,
        "max": "360",
        "step": 1,
        "className": "",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "eacf802104864a50"
            ]
        ]
    },
    {
        "id": "044e098d7f31be5d",
        "type": "ui_slider",
        "z": "807162d3d645abc3",
        "name": "angle",
        "label": "descent",
        "tooltip": "",
        "group": "7206086c3d6e4859",
        "order": 7,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "angle",
        "topicType": "str",
        "min": "-45",
        "max": "45",
        "step": "0.5",
        "className": "",
        "x": 410,
        "y": 380,
        "wires": [
            [
                "eacf802104864a50"
            ]
        ]
    },
    {
        "id": "eacf802104864a50",
        "type": "function",
        "z": "807162d3d645abc3",
        "name": "map controller",
        "func": "var mapstate = global.get(\"mapstate\") || {};\nvar triggers = [\"point\", \"move\"];\nvar remember = [\"distance\", \"heading\", \"numpts\", \"altitude\",\"angle\"];\n\nif (msg.topic == \"worldmap\") {\n    if (triggers.indexOf(msg.payload.action) >= 0) {\n        mapstate.lat = msg.payload.lat;\n        mapstate.lon = msg.payload.lon;\n        mapstate.path = null;\n        mapstate.alts = null;\n;\n    }\n}\nif (remember.indexOf(msg.topic) >= 0) {\n    mapstate[msg.topic] = msg.payload;\n}\n\nif (mapstate.numpts && mapstate.heading && mapstate.distance && mapstate.lat && mapstate.lon) {\n    var geod = geodesic.Geodesic.WGS84;\n    var r = geod.Direct(mapstate.lat, mapstate.lon, mapstate.heading, mapstate.distance);\n    var command = {\n        payload: {\n            \"name\": \"cut\",\n            \"color\": \"green\",\n            \"line\": [[mapstate.lat, mapstate.lon], [r.lat2, r.lon2]]\n        }\n    };\n    var l = geod.InverseLine(mapstate.lat, mapstate.lon, r.lat2, r.lon2);\n    var dd = (l.s13 / mapstate.numpts);\n    var pos = [];\n    var alts = [];\n    for (var i = 0; i < mapstate.numpts; ++i) {\n        var s = Math.min(dd * i, l.s13);\n        var r = l.Position(s, geodesic.Geodesic.STANDARD | geodesic.Geodesic.LONG_UNROLL);\n        pos.push([r.lat2, r.lon2]);\n        var alt = mapstate.altitude + Math.sin(mapstate.angle * (Math.PI / 180)) * dd * i\n        alts.push(alt);\n    }\n    mapstate.path = pos;\n    mapstate.alts = alts;\n    global.set(\"mapstate\", mapstate);\n    return [command, { payload: pos }];\n} else {\n    global.set(\"mapstate\", mapstate);\n}\nreturn;\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set(\"mapstate\",{\n    numpts: 200,\n    lat: 46.99,\n    lon:15.0,\n    distance: 5000,\n    heading: 140,\n    altitude: 1200,\n    angle: -3\n});",
        "finalize": "",
        "libs": [
            {
                "var": "geodesic",
                "module": "geographiclib-geodesic"
            }
        ],
        "x": 660,
        "y": 180,
        "wires": [
            [
                "c58a1ef972059de0",
                "2d4aa86c97b46b3d"
            ],
            [
                "7f64a3ade9b9fbc6",
                "164fdb96883ea643"
            ]
        ],
        "outputLabels": [
            "mapcommand",
            "request"
        ]
    },
    {
        "id": "f415e5ffca183100",
        "type": "worldmap in",
        "z": "807162d3d645abc3",
        "name": "worldmap in",
        "path": "/worldmap",
        "events": "connect,disconnect,point,layer,bounds,files,draw,other",
        "x": 430,
        "y": 60,
        "wires": [
            [
                "eacf802104864a50"
            ]
        ]
    },
    {
        "id": "5050efc2cb6c8f4e",
        "type": "ui_slider",
        "z": "807162d3d645abc3",
        "name": "numpts",
        "label": "numpts",
        "tooltip": "",
        "group": "7206086c3d6e4859",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "all",
        "topic": "numpts",
        "topicType": "str",
        "min": 0,
        "max": "200",
        "step": "10",
        "className": "",
        "x": 420,
        "y": 440,
        "wires": [
            [
                "eacf802104864a50"
            ]
        ]
    },
    {
        "id": "2d4aa86c97b46b3d",
        "type": "debug",
        "z": "807162d3d645abc3",
        "name": "map commands",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 120,
        "wires": []
    },
    {
        "id": "cacdc979f15f5fa5",
        "type": "inject",
        "z": "807162d3d645abc3",
        "name": "one-time setup",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 140,
        "wires": [
            [
                "58328bc86a331d90"
            ]
        ]
    },
    {
        "id": "7f64a3ade9b9fbc6",
        "type": "http request",
        "z": "807162d3d645abc3",
        "name": "elevation lookup",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://127.0.01:9000/v1/elevations",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "16d8de9f78522a7b",
                "581905782732317f"
            ]
        ]
    },
    {
        "id": "581905782732317f",
        "type": "debug",
        "z": "807162d3d645abc3",
        "name": "elevation query results",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 300,
        "wires": []
    },
    {
        "id": "2f9899c4ebfef9ce",
        "type": "ui_chart",
        "z": "807162d3d645abc3",
        "name": "",
        "group": "7206086c3d6e4859",
        "order": 11,
        "width": 24,
        "height": 4,
        "label": "flight path + ground profile",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 900,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "16d8de9f78522a7b",
        "type": "function",
        "z": "807162d3d645abc3",
        "name": "graph + hit detect",
        "func": "var mapstate = global.get(\"mapstate\") || {};\nvar profile = msg.payload;\nvar labels = [];\nvar mapcommand = null;\nvar hitindex = null;\n\nfor (var i = 0; i < mapstate.numpts; i++) {\n    if (mapcommand == null && (mapstate.alts[i] < profile[i])) {\n        hitindex = i;\n        mapcommand = {\n            payload: {\n                name: \"impact\",\n                icon: \"fa-crosshairs\",\n                iconColor: \"#ff0000\",\n                lat: mapstate.path[i][0],\n                lon: mapstate.path[i][1]\n            }\n        };\n        flow.set(\"lastmarker\", mapcommand);\n    }\n    var d = 0.001 * mapstate.distance * i / mapstate.numpts;\n    labels.push(d.toFixed(0));\n}\n\nvar graph = {\n    payload: [\n        {\n            \"series\": [\n                \"profile\",\n                \"path\"\n            ],\n            \"data\": [profile, mapstate.alts],\n            \"labels\": labels\n        }\n    ]\n};\nif (mapcommand == null) {\n    mapcommand = flow.get(\"lastmarker\");\n    mapcommand.payload.deleted = true;\n};\nif (hitindex > -1) {\n    graph.payload[0].series.push(\"impact\");\n    graph.payload[0].data.push([mapstate.alts[hitindex]]);\n}\n\nreturn [graph, mapcommand];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflow.set(\"lastmarker\", {});",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "2f9899c4ebfef9ce"
            ],
            [
                "c58a1ef972059de0"
            ]
        ],
        "outputLabels": [
            "graph",
            "map command"
        ]
    },
    {
        "id": "4a52b48aac2e1cd1",
        "type": "catch",
        "z": "807162d3d645abc3",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 700,
        "y": 560,
        "wires": [
            [
                "5460d3886f2ae185"
            ]
        ]
    },
    {
        "id": "5460d3886f2ae185",
        "type": "debug",
        "z": "807162d3d645abc3",
        "name": "Catch errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 560,
        "wires": []
    },
    {
        "id": "164fdb96883ea643",
        "type": "debug",
        "z": "807162d3d645abc3",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 180,
        "wires": []
    },
    {
        "id": "58328bc86a331d90",
        "type": "function",
        "z": "807162d3d645abc3",
        "name": "mapstate presets",
        "func": "\nglobal.set(\"mapstate\", {\n    numpts: 200,\n    lat: 47.1290479545011,\n    lon: 15.211671610766512,\n    distance: 5000,\n    heading: 140,\n    altitude: 1200,\n    angle: -3\n});\n\nvar mapstate = global.get(\"mapstate\");\n\nreturn [\n    { payload: mapstate.heading },\n    { payload: mapstate.altitude },\n    { payload: mapstate.distance },\n    { payload: mapstate.angle },\n    { payload: mapstate.numpts },\n    [\n        {\n            payload: {\n                name: \"marker\",\n                // panit: true,\n                draggable: true,\n                lat: mapstate.lat,\n                lon: mapstate.lon\n            }\n        },\n        // {\n        //     payload: {\n        //         command: {\n        //             panit: true,\n        //         }\n        //     }\n        // },\n    ]\n \n];\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 280,
        "wires": [
            [
                "144710243c9c2497"
            ],
            [
                "abe4a6a1406a0286"
            ],
            [
                "186d7d83d731da37"
            ],
            [
                "044e098d7f31be5d"
            ],
            [
                "5050efc2cb6c8f4e"
            ],
            [
                "c58a1ef972059de0",
                "2d4aa86c97b46b3d"
            ]
        ],
        "outputLabels": [
            "heading",
            "altitude",
            "distance",
            "angle",
            "numpts",
            "marker"
        ]
    },
    {
        "id": "da3c6af9ca6120dc",
        "type": "comment",
        "z": "807162d3d645abc3",
        "name": "DEMD:",
        "info": "\n\nrun as\n\n(dev-3.8) BigM1:demd mah$ pwd\n/Users/mah/Ballon/src/BalloonWare/signalk/demd\n(dev-3.8) BigM1:demd mah$ ./demd -p 9000 mahdem/\n\n",
        "x": 650,
        "y": 40,
        "wires": []
    }
]